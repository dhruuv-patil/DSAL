#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// DFS traversal
void dfs(vector<vector<int>>& g, int start, vector<int>& vis) {
    vis[start] = 1;
    cout << start << " ";
    for (auto child : g[start]) {
        if (!vis[child]) {
            dfs(g, child, vis);
        }
    }
}

// BFS traversal
void bfs(vector<vector<int>>& g, int start) {
    vector<int> vis(g.size(), 0);
    queue<int> q;
    q.push(start);
    vis[start] = 1;

    while (!q.empty()) {
        int curr = q.front();
        q.pop();
        cout << curr << " ";
        for (auto child : g[curr]) {
            if (!vis[child]) {
                q.push(child);
                vis[child] = 1;
            }
        }
    }
}

int main() {
    int v;
    cout << "Enter number of landmarks (vertices): ";
    cin >> v;
    vector<vector<int>> g(v); // adjacency list

    int e;
    cout << "Enter number of paths (edges): ";
    cin >> e;
    cout << "Enter " << e << " edges (as pairs of landmark numbers):\n";
    for (int i = 0; i < e; i++) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a); // undirected graph
    }

    int start;
    cout << "Enter starting landmark number for traversal: ";
    cin >> start;

    vector<int> vis(v, 0);
    cout << "DFS: ";
    dfs(g, start, vis);
    cout << endl;

    cout << "BFS: ";
    bfs(g, start);
    cout << endl;

    return 0;
}
