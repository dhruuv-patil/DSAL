#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string keyword;
    string meaning;
    Node* left;
    Node* right;
    int height;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        left = right = nullptr;
        height = 1;
    }
};

class AVLTree {
    Node* root;

    int height(Node* n) {
        return n ? n->height : 0;
    }

    int balanceFactor(Node* n) {
        return n ? height(n->left) - height(n->right) : 0;
    }

    void updateHeight(Node* n) {
        n->height = 1 + max(height(n->left), height(n->right));
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        x->right = y;
        y->left = T2;

        updateHeight(y);
        updateHeight(x);
        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        updateHeight(x);
        updateHeight(y);
        return y;
    }

    Node* balance(Node* node) {
        updateHeight(node);
        int bf = balanceFactor(node);

        if (bf > 1) {
            if (balanceFactor(node->left) < 0)
                node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        if (bf < -1) {
            if (balanceFactor(node->right) > 0)
                node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    Node* insert(Node* node, string key, string meaning) {
        if (!node)
            return new Node(key, meaning);

        if (key < node->keyword)
            node->left = insert(node->left, key, meaning);
        else if (key > node->keyword)
            node->right = insert(node->right, key, meaning);
        else {
            cout << "Keyword already exists. Use update.\n";
            return node;
        }

        return balance(node);
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current->left)
            current = current->left;
        return current;
    }

    Node* deleteNode(Node* root, string key) {
        if (!root)
            return root;

        if (key < root->keyword)
            root->left = deleteNode(root->left, key);
        else if (key > root->keyword)
            root->right = deleteNode(root->right, key);
        else {
            if (!root->left || !root->right) {
                Node* temp = root->left ? root->left : root->right;
                delete root;
                return temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->keyword = temp->keyword;
                root->meaning = temp->meaning;
                root->right = deleteNode(root->right, temp->keyword);
            }
        }
        return balance(root);
    }

    Node* update(Node* root, string key, string newMeaning) {
        if (!root) {
            cout << "Keyword not found.\n";
            return root;
        }

        if (key < root->keyword)
            root->left = update(root->left, key, newMeaning);
        else if (key > root->keyword)
            root->right = update(root->right, key, newMeaning);
        else
            root->meaning = newMeaning;

        return root;
    }

    void inorder(Node* root) {
        if (root) {
            inorder(root->left);
            cout << root->keyword << ": " << root->meaning << endl;
            inorder(root->right);
        }
    }

    void reverseInorder(Node* root) {
        if (root) {
            reverseInorder(root->right);
            cout << root->keyword << ": " << root->meaning << endl;
            reverseInorder(root->left);
        }
    }

    int getMaxComparisons(Node* root) {
        return height(root);
    }

public:
    AVLTree() {
        root = nullptr;
    }

    void addKeyword(string key, string meaning) {
        root = insert(root, key, meaning);
    }

    void deleteKeyword(string key) {
        root = deleteNode(root, key);
    }

    void updateMeaning(string key, string newMeaning) {
        root = update(root, key, newMeaning);
    }

    void displayAscending() {
        cout << "Ascending Order:\n";
        inorder(root);
    }

    void displayDescending() {
        cout << "Descending Order:\n";
        reverseInorder(root);
    }

    void maxComparisons() {
        cout << "Maximum comparisons required to find any keyword: " << getMaxComparisons(root) << endl;
    }
};

int main() {
    AVLTree dict;
    int choice;
    string keyword, meaning;

    do {
        cout << "\n1. Add Keyword\n2. Delete Keyword\n3. Update Meaning\n4. Display Ascending\n5. Display Descending\n6. Max Comparisons\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1:
            cout << "Enter keyword: ";
            getline(cin, keyword);
            cout << "Enter meaning: ";
            getline(cin, meaning);
            dict.addKeyword(keyword, meaning);
            break;
        case 2:
            cout << "Enter keyword to delete: ";
            getline(cin, keyword);
            dict.deleteKeyword(keyword);
            break;
        case 3:
            cout << "Enter keyword to update: ";
            getline(cin, keyword);
            cout << "Enter new meaning: ";
            getline(cin, meaning);
            dict.updateMeaning(keyword, meaning);
            break;
        case 4:
            dict.displayAscending();
            break;
        case 5:
            dict.displayDescending();
            break;
        case 6:
            dict.maxComparisons();
            break;
        }
    } while (choice != 7);

    return 0;
}
